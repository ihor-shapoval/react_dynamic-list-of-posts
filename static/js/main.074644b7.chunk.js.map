{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","request","url","a","item","fetch","response","json","getUserPosts","userId","getPosts","getPostDetails","postId","PostsList","props","selectedUserId","selectedPostId","setSelectedPostId","useState","posts","setPosts","useEffect","then","className","length","map","post","title","id","type","onClick","NewCommentForm","addNewComment","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","placeholder","value","onChange","target","getPostComments","deleteComment","commentId","method","addComment","newComment","headers","JSON","stringify","PostDetails","setPost","comments","setComments","isVisible","setVisible","updateCommentList","removeComment","comment","getUsers","App","users","setUsers","setSelectedUserId","user","ReactDOM","render","document","getElementById"],"mappings":"yUAAaA,EAAW,oCAEXC,EAAO,uCAAG,WAAOC,GAAP,6BAAAC,EAAA,6DAAmBC,EAAnB,+BAA0B,GAA1B,SACEC,MAAM,GAAD,OAAIL,GAAJ,OAAeE,GAAOE,GAD7B,cACfE,EADe,yBAGdA,EAASC,QAHK,2CAAH,sDCAPC,EAAY,uCAAG,WAAOC,GAAP,SAAAN,EAAA,+EACnBF,EAAQ,iBAAD,OAAkBQ,KADN,2CAAH,sDAIZC,EAAQ,uCAAG,sBAAAP,EAAA,+EACfF,EAAQ,WADO,2CAAH,qDAIRU,EAAc,uCAAG,WAAOC,GAAP,SAAAT,EAAA,+EACrBF,EAAQ,UAAD,OAAWW,KADG,2CAAH,sD,OCAdC,EAA6B,SAACC,GACzC,IAAQC,EAAsDD,EAAtDC,eAAgBC,EAAsCF,EAAtCE,eAAgBC,EAAsBH,EAAtBG,kBACxC,EAA0BC,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACe,IAAnBN,EASJP,EAAaO,GACVO,MAAK,SAAAhB,GACJc,EAASd,MAVXI,IACGY,MAAK,SAAAhB,GACJc,EAASd,QAUd,CAACS,IAUJ,OACE,sBAAKQ,UAAU,YAAf,UACE,yCACEJ,EAAMK,QACN,iDAEF,oBAAID,UAAU,kBAAd,SACGJ,EAAMM,KAAI,SAAAC,GAAI,OACb,qBAAIH,UAAU,kBAAd,UACE,gCACE,6CACaG,EAAKjB,OADlB,SAGCiB,EAAKC,MACLD,EAAKE,MAER,wBACEC,KAAK,SACLN,UAAU,2BACVO,QAAS,kBA3BCF,GA2BmBF,EAAKE,QAzB1CX,EADED,IAAmBY,EACH,EAEAA,GAJD,IAACA,GAwBZ,SAKGZ,KAAoBU,EAAKE,GACtB,QACA,WAf6BF,EAAKE,aCtCvCG,G,MAAkC,SAACjB,GAC9C,IAAQF,EAA0BE,EAA1BF,OAAQoB,EAAkBlB,EAAlBkB,cAChB,EAAwBd,mBAAS,IAAjC,mBAAOe,EAAP,KAAaC,EAAb,KACA,EAA0BhB,mBAAS,IAAnC,mBAAOiB,EAAP,KAAcC,EAAd,KACA,EAAwBlB,mBAAS,IAAjC,mBAAOmB,EAAP,KAAaC,EAAb,KAqBA,OACE,uBACEf,UAAU,iBACVgB,SAhBiB,SAACC,GACpBA,EAAMC,iBAQNT,EAPmB,CACjBpB,SACAqB,OACAE,QACAE,SAXFC,EAAQ,IACRJ,EAAQ,IACRE,EAAS,KAiBT,UAIE,qBAAKb,UAAU,aAAf,SACE,uBACEM,KAAK,OACLI,KAAK,OACLS,YAAY,YACZnB,UAAU,wBACVoB,MAAOV,EACPW,SAAU,SAACJ,GAAD,OAAWN,EAAQM,EAAMK,OAAOF,YAI9C,qBAAKpB,UAAU,aAAf,SACE,uBACEM,KAAK,OACLI,KAAK,QACLS,YAAY,aACZnB,UAAU,wBACVoB,MAAOR,EACPS,SAAU,SAACJ,GAAD,OAAWJ,EAASI,EAAMK,OAAOF,YAI/C,qBAAKpB,UAAU,aAAf,SACE,0BACEU,KAAK,OACLS,YAAY,oBACZnB,UAAU,wBACVoB,MAAON,EACPO,SAAU,SAACJ,GAAD,OAAWF,EAAQE,EAAMK,OAAOF,YAI9C,wBACEd,KAAK,SACLN,UAAU,uCAFZ,gCCpEOuB,EAAe,uCAAG,WAAOlC,GAAP,SAAAT,EAAA,+EACtBF,EAAQ,oBAAD,OAAqBW,KADN,2CAAH,sDAIfmC,EAAa,uCAAG,WAAOC,GAAP,SAAA7C,EAAA,+EACpBF,EAAQ,aAAD,OAAc+C,GAAa,CAAEC,OAAQ,YADxB,2CAAH,sDAIbC,EAAU,uCAAG,WAAOC,GAAP,SAAAhD,EAAA,+EACjBF,EAAQ,YAAa,CAC1BgD,OAAQ,OACRG,QAAS,CACP,eAAgB,mCAElBf,KAAMgB,KAAKC,UAAUH,MANC,2CAAH,sDCAVI,G,MAA+B,SAACzC,GAC3C,IAAQE,EAAmBF,EAAnBE,eACR,EAAyBE,mBAAsB,MAA/C,mBAAOC,EAAP,KAAcqC,EAAd,KACA,EAAgCtC,mBAAoB,IAApD,mBAAOuC,EAAP,KAAiBC,EAAjB,KACA,EAAgCxC,oBAAS,GAAzC,mBAAOyC,EAAP,KAAkBC,EAAlB,KAEAvC,qBAAU,WACRV,EAAeK,GACZM,MAAK,SAAAhB,GACJkD,EAAQlD,MAEZwC,EAAgB9B,GACbM,MAAK,SAAAhB,GACJoD,EAAYpD,QAEf,CAACU,IAEJ,IAAMgB,EAAa,uCAAG,WAAOmB,GAAP,eAAAhD,EAAA,sEACd+C,EAAWC,GADG,uBAEYL,EAAgB9B,GAF5B,OAEd6C,EAFc,OAIpBH,EAAYG,GAJQ,2CAAH,sDAObC,EAAa,uCAAG,WAAOlC,GAAP,eAAAzB,EAAA,sEACd4C,EAAcnB,GADA,uBAEYkB,EAAgB9B,GAF5B,OAEd6C,EAFc,OAIpBH,EAAYG,GAJQ,2CAAH,sDAWnB,OACE,sBAAKtC,UAAU,cAAf,UACE,+CAEA,yBAASA,UAAU,oBAAnB,SACE,mCAAIJ,QAAJ,IAAIA,OAAJ,EAAIA,EAAOkB,SAGb,0BAASd,UAAU,wBAAnB,UACE,wBACEM,KAAK,SACLN,UAAU,SACVO,QAhBkB,WACxB8B,GAAYD,IAYR,SAKGA,EAAS,eACEF,EAASjC,OADX,2BAEEiC,EAASjC,OAFX,cAKZ,oBAAID,UAAU,oBAAd,SACGoC,GACC,mCACGF,EAAShC,KAAI,SAAAsC,GAAO,OACnB,qBACExC,UAAU,yBADZ,UAIE,wBACEM,KAAK,SACLN,UAAU,oCACVO,QAAS,kBAAMgC,EAAcC,EAAQnC,KAHvC,eAOA,4BACGmC,EAAQ1B,SAVN0B,EAAQnC,cAmBzB,kCACE,qBAAKL,UAAU,4BAAf,SACE,cAAC,EAAD,CACEX,OAAQI,EACRgB,cAAeA,aC3FdgC,EAAQ,uCAAG,sBAAA7D,EAAA,+EACfF,EAAQ,WADO,2CAAH,qDC+DNgE,EA1DO,WACpB,MAA0B/C,mBAAiB,IAA3C,mBAAOgD,EAAP,KAAcC,EAAd,KACA,EAA4CjD,mBAAS,GAArD,mBAAOH,EAAP,KAAuBqD,EAAvB,KACA,EAA4ClD,mBAAS,GAArD,mBAAOF,EAAP,KAAuBC,EAAvB,KASA,OAPAI,qBAAU,WACR2C,IACG1C,MAAK,SAAAhB,GACJ6D,EAAS7D,QAEZ,IAGD,sBAAKiB,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wDAGE,yBACEA,UAAU,qBACVqB,SAAU,SAACJ,GACT4B,GAAmB5B,EAAMK,OAAOF,QAHpC,UAME,wBAAQA,MAAM,IAAd,uBACCuB,EAAMzC,KAAI,SAAA4C,GAAI,OACb,wBACE1B,MAAO0B,EAAKzC,GADd,SAIGyC,EAAKpC,MAFDoC,EAAKzC,eASpB,uBAAML,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACER,eAAgBA,EAChBC,eAAgBA,EAChBC,kBAAmBA,MAIvB,qBAAKM,UAAU,eAAf,WACKP,GACD,cAAC,EAAD,CACEA,eAAgBA,aCpD9BsD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.074644b7.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url:string, item = {}) => {\n  const response = await fetch(`${BASE_URL}${url}`, item);\n\n  return response.json();\n};\n","import { request } from './api';\n\nexport const getUserPosts = async (userId:number) => {\n  return request(`/posts?userId=${userId}`);\n};\n\nexport const getPosts = async () => {\n  return request('/posts');\n};\n\nexport const getPostDetails = async (postId: number) => {\n  return request(`/posts/${postId}`);\n};\n","import React, { useState, useEffect } from 'react';\nimport './PostsList.scss';\nimport { getPosts, getUserPosts } from '../../api/posts';\n\ninterface Props {\n  selectedUserId: number;\n  selectedPostId: number;\n  setSelectedPostId: (postId: number) => void;\n}\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { selectedUserId, selectedPostId, setSelectedPostId } = props;\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    if (selectedUserId === 0) {\n      getPosts()\n        .then(response => {\n          setPosts(response);\n        });\n\n      return;\n    }\n\n    getUserPosts(selectedUserId)\n      .then(response => {\n        setPosts(response);\n      });\n  }, [selectedUserId]);\n\n  const handleChange = (id: number) => {\n    if (selectedPostId === id) {\n      setSelectedPostId(0);\n    } else {\n      setSelectedPostId(id);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {!posts.length && (\n        <h3>Posts Not Found</h3>\n      )}\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                {`[User #${post.userId}]: `}\n              </b>\n              {post.title}\n              {post.id}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleChange(+post.id)}\n            >\n              {selectedPostId === +post.id\n                ? 'Close'\n                : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number;\n  addNewComment: (newComment: Comment) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { postId, addNewComment } = props;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const resetInputs = () => {\n    setBody('');\n    setName('');\n    setEmail('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    const newComment = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    addNewComment(newComment as Comment);\n    resetInputs();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { request } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = async (commentId: number) => {\n  return request(`/comments/${commentId}`, { method: 'DELETE' });\n};\n\nexport const addComment = async (newComment: Comment) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment, addComment } from '../../api/comments';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPostId } = props;\n  const [posts, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isVisible, setVisible] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(response => {\n        setPost(response);\n      });\n    getPostComments(selectedPostId)\n      .then(response => {\n        setComments(response);\n      });\n  }, [selectedPostId]);\n\n  const addNewComment = async (newComment: Comment) => {\n    await addComment(newComment);\n    const updateCommentList = await getPostComments(selectedPostId);\n\n    setComments(updateCommentList);\n  };\n\n  const removeComment = async (id: number) => {\n    await deleteComment(id);\n    const updateCommentList = await getPostComments(selectedPostId);\n\n    setComments(updateCommentList);\n  };\n\n  const handleHideComment = () => {\n    setVisible(!isVisible);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{posts?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleHideComment}\n        >\n          {isVisible\n            ? `Hide ${comments.length} coments`\n            : `Show ${comments.length} coments`}\n        </button>\n\n        <ul className=\"PostDetails__list\">\n          {isVisible && (\n            <>\n              {comments.map(comment => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comment.id}\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => removeComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>\n                    {comment.body}\n                  </p>\n                </li>\n              ))}\n            </>\n          )}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            addNewComment={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getUsers = async () => {\n  return request('/users');\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getUsers()\n      .then(response => {\n        setUsers(response);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              setSelectedUserId(+event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {!!selectedPostId && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}